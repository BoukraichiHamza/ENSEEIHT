
(* PGCD : Algorithme Euclide *)

theory PGCD

  use import int.Int

  function pgcd(a b : int) : int


  axiom un : forall a:int. pgcd a a = a
  axiom deux : forall a:int, b:int. pgcd a b=pgcd b a
  axiom trois : forall a:int, b:int. a>b -> pgcd a b=pgcd (a-b) b
 
end

module PGCDEuclide

  use import int.Int
  use import ref.Refint
  use import PGCD

  let pgcd_euclide (a b: int) : int
    requires { 0 < a && 0 < b }
    ensures  { result = (pgcd a b)}
  =
    let ap = ref a in
    let bp = ref b in
    while (!ap <> !bp) do
      invariant { !ap>0 && !bp>0 && (pgcd (!ap) (!bp)) = pgcd a b }
      variant   { (!ap)+(!bp) }
      if (!ap <= !bp) then
      	 bp := !bp - !ap
      else
      	 ap := !ap - !bp
    done;
    !ap

end
